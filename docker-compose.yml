version: '3.8'
services:
  users:
    build:
      context: .
      dockerfile: ./apps/users/Dockerfile
      target: development
    command: npm run start:dev users
    env_file:
      - ./apps/users/.env
    depends_on:
      users-db:
        condition: service_healthy
    volumes:
      - .:/usr/src/app:delegated
      - /usr/src/app/node_modules
    ports:
      - 3001:3001
    networks:
      - app-network
    develop:
      watch:
        - path: ./apps/users/src
          action: sync
          target: /usr/src/app/apps/users/src
        - path: ./package.json
          action: rebuild
        

  users-db:
    image: postgres:13
    env_file:
      - ./apps/users/.env
    ports:
      - '5434:5432'  
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network
  users-test-db:
    image: postgres:13
    env_file:
      - ./apps/users/.env
    ports:
      - '5435:5432'  
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network
  products:
    build:
      context: .
      dockerfile: ./apps/products/Dockerfile
      target: development
    command: npm run start:dev products
    env_file:
      - ./apps/products/.env
    depends_on:
      products-db:
        condition: service_healthy
    volumes:
      - .:/usr/src/app:delegated
      - /usr/src/app/node_modules
    ports:
      - 3002:3002
    networks:
      - app-network
    develop:
      watch:
        - path: ./apps/products/src
          action: sync
          target: /usr/src/app/apps/products/src
        - path: ./package.json
          action: rebuild
        

  products-db:
    image: postgres:13
    env_file:
      - ./apps/products/.env
    ports:
      - '5436:5432'  
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network
  products-test-db:
    image: postgres:13
    env_file:
      - ./apps/products/.env
    ports:
      - '5437:5432'  
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network
  carts-db:
    image: postgres:13
    env_file:
      - ./apps/cart/.env
    ports:
      - '5438:5432'  
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network
  carts:
    build:
      context: .
      dockerfile: ./apps/cart/Dockerfile
      target: development
    command: npm run start:dev cart
    env_file:
      - ./apps/cart/.env
    depends_on:
      carts-db:
        condition: service_healthy
    volumes:
      - ./apps/cart:/usr/src/app/apps/cart
      - /usr/src/app/node_modules
      - /usr/src/app/prisma
    ports:
      - '3003:3003'
    networks:
      - app-network
    develop:
      watch:
        - path: ./apps/cart/src
          action: sync
          target: /usr/src/app/apps/cart/src
        - path: ./package.json
          action: rebuild
  inventory-db:
    image: postgres:13
    env_file:
      - ./apps/cart/.env
    ports:
      - '5439:5432'  
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --requirepass yourpassword
    networks:
      - app-network
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT}:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network
  inventory:
    build:
      context: .
      dockerfile: ./apps/inventory/Dockerfile
      target: development
    command: npm run start:dev inventory
    env_file:
      - ./apps/inventory/.env
    depends_on:
      inventory-db:
        condition: service_healthy
      redis:
        condition: service_started
      rabbitmq:
        condition: service_started
    volumes:
      - .:/usr/src/app:delegated
      - /usr/src/app/node_modules
    ports:
      - 3004:3004
    networks:
      - app-network
    develop:
      watch:
        - path: ./apps/inventory/src
          action: sync
          target: /usr/src/app/apps/inventory/src
        - path: ./package.json
          action: rebuild
        

volumes:
  redis_data:
  rabbitmq_data:
networks:
  app-network:  
    driver: bridge
  